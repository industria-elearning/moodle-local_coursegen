{"version":3,"file":"add_course_ai_modal.min.js","sources":["../src/add_course_ai_modal.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course AI Modal Module using Moodle's modal factory\n *\n * @module     local_datacurso/add_course_ai_modal\n * @copyright  2025 Buendata <soluciones@buendata.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {get_string} from 'core/str';\nimport * as chatbotRepository from 'local_datacurso/repository/chatbot';\nimport {startStreaming} from 'local_datacurso/course_streaming';\n\nlet currentModal = null;\n\n/**\n * Initialize and show the course AI modal\n * @param {Object} params - Parameters object\n * @param {string} params.streamingurl - The complete URL for course streaming (including session)\n * @returns {Promise}\n */\nexport const init = async(params = {}) => {\n    try {\n      console.log(params);\n        // Close existing modal if open\n        if (currentModal) {\n            currentModal.destroy();\n            currentModal = null;\n        }\n\n        // Get modal title and body content\n        const [title, bodyHTML] = await Promise.all([\n            get_string('addcourseai_modaltitle', 'local_datacurso'),\n            Templates.render('local_datacurso/add_course_ai_modal', {})\n        ]);\n\n        // Create modal using modern Modal class\n        currentModal = await Modal.create({\n            title: title,\n            body: bodyHTML,\n            large: true,\n            scrollable: true,\n            removeOnClose: true\n        });\n\n        currentModal.getRoot().addClass('local_datacurso_course_ai_modal');\n\n        currentModal.show();\n\n        const bodyEl = currentModal.getBody()[0];\n        initializeChatInterface(bodyEl, params);\n        return currentModal;\n\n    } catch (error) {\n        Notification.exception(error);\n        return null;\n    }\n};\n\n/**\n * Initialize the chat interface\n * @param {Element} container - The modal container element\n * @param {Object} params - The parameters including streaming URL\n */\nconst initializeChatInterface = async (container, params) => {\n    // Find the streaming button and add event listener\n    try {\n        // Start streaming with the URL provided by PHP (already includes session)\n        await startStreaming(params.streamingurl, container);\n        \n    } catch (error) {\n        console.error('Error starting streaming:', error);\n        Notification.exception(error);\n    }\n};\n\n/**\n * Add user message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n */\nconst pushUser = (wrap, text) => addBubble(wrap, text, \"user\");\n\n/**\n * Add AI message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n */\nconst pushAI = (wrap, text) => addBubble(wrap, text, \"ai\");\n\n/**\n * Add message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n * @param {string} role - Message role (user/ai)\n */\nconst addBubble = (wrap, text, role) => {\n  const row = document.createElement(\"div\");\n  row.className = `local_datacurso_ai_msg ${role}`;\n  const bubble = document.createElement(\"div\");\n  bubble.className = \"bubble\";\n  bubble.textContent = text;\n  row.appendChild(bubble);\n  wrap.appendChild(row);\n  scrollToBottom(wrap);\n};\n\n/**\n * Add typing indicator\n * @param {Element} wrap - Messages container\n * @returns {Element} The typing element\n */\nconst pushTyping = (wrap) => {\n  const row = document.createElement(\"div\");\n  row.className = \"local_datacurso_ai_msg ai local_datacurso_ai_typing\";\n  const bubble = document.createElement(\"div\");\n  bubble.className = \"bubble\";\n  bubble.innerHTML =\n    '<span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span>';\n  row.appendChild(bubble);\n  wrap.appendChild(row);\n  scrollToBottom(wrap);\n  return row;\n};\n\n/**\n * Remove typing indicator\n * @param {Element} el - The typing element to remove\n */\nconst removeTyping = (el) => el?.remove();\n\n/**\n * Scroll messages to bottom\n * @param {Element} wrap - Messages container\n */\nconst scrollToBottom = (wrap) => {\n  wrap.scrollTop = wrap.scrollHeight;\n};\n\n/**\n * Set loading state for button\n * @param {Element} btn - Button element\n * @param {boolean} isLoading - Loading state\n */\nconst setLoading = (btn, isLoading) => {\n  btn.disabled = isLoading;\n  btn.style.opacity = isLoading ? 0.7 : 1;\n};\n\n/**\n * Render WebService result\n * @param {Element} wrap - Messages container\n * @param {Object} response - API response\n */\nconst renderWSResult = (wrap, response) => {\n  const lines = [];\n\n  if (response?.success === false) {\n    if (response?.message) {\n      pushAI(wrap, response.message);\n    } else {\n      get_string(\"addcourseai_faildefault\", \"local_datacurso\").then((msg) => {\n        pushAI(wrap, msg);\n        return msg;\n      }).catch(() => {\n        pushAI(wrap, 'It was not possible to create the course.');\n      });\n    }\n    return;\n  }\n\n  if (response?.message) {\n    lines.push(response.message);\n  }\n\n  if (lines.length) {\n    pushAI(wrap, lines.join(\"\\n\"));\n    setTimeout(() => {\n      const last = wrap.querySelector(\".local_datacurso_ai_msg.ai:last-child .bubble\");\n      if (last) {\n        last.textContent = lines.join(\"\\n\");\n      }\n    }, 50);\n  } else {\n    get_string(\"addcourseai_done\", \"local_datacurso\").then((msg) => {\n      pushAI(wrap, msg);\n      return msg;\n    }).catch(() => {\n      pushAI(wrap, 'Done! The course was created successfully.');\n    });\n  }\n};\n"],"names":["currentModal","async","params","console","log","destroy","title","bodyHTML","Promise","all","Templates","render","Modal","create","body","large","scrollable","removeOnClose","getRoot","addClass","show","bodyEl","getBody","initializeChatInterface","error","exception","container","streamingurl"],"mappings":";;;;;;;g5BA+BIA,aAAe,mBAQCC,qBAAMC,8DAAS,OAE7BC,QAAQC,IAAIF,QAENF,eACAA,aAAaK,UACbL,aAAe,YAIZM,MAAOC,gBAAkBC,QAAQC,IAAI,EACxC,mBAAW,yBAA0B,mBACrCC,mBAAUC,OAAO,sCAAuC,MAI5DX,mBAAqBY,eAAMC,OAAO,CAC9BP,MAAOA,MACPQ,KAAMP,SACNQ,OAAO,EACPC,YAAY,EACZC,eAAe,IAGnBjB,aAAakB,UAAUC,SAAS,mCAEhCnB,aAAaoB,aAEPC,OAASrB,aAAasB,UAAU,UACtCC,wBAAwBF,OAAQnB,QACzBF,aAET,MAAOwB,oCACQC,UAAUD,OAChB,aASTD,wBAA0BtB,MAAOyB,UAAWxB,oBAIpC,oCAAeA,OAAOyB,aAAcD,WAE5C,MAAOF,OACLrB,QAAQqB,MAAM,4BAA6BA,6BAC9BC,UAAUD"}
{"version":3,"file":"add_course_ai_modal.min.js","sources":["../src/add_course_ai_modal.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course AI Modal Module using Moodle's modal factory\n *\n * @module     local_datacurso/add_course_ai_modal\n * @copyright  2025 Buendata <soluciones@buendata.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {get_string} from 'core/str';\nimport {startStreaming} from 'local_datacurso/course_streaming';\nimport {planCourseMessage} from 'local_datacurso/repository/chatbot';\n\nlet currentModal = null;\n\n/**\n * Initialize and show the course AI modal\n * @param {Object} params - Parameters object\n * @param {string} params.streamingurl - The complete URL for course streaming (including session)\n * @returns {Promise}\n */\nexport const init = async(params = {}) => {\n    try {\n        // Close existing modal if open\n        if (currentModal) {\n            currentModal.destroy();\n            currentModal = null;\n        }\n\n        // Get modal title and body content\n        const [title, bodyHTML] = await Promise.all([\n            get_string('addcourseai_modaltitle', 'local_datacurso'),\n            Templates.render('local_datacurso/add_course_ai_modal', {})\n        ]);\n\n        // Create modal using modern Modal class\n        currentModal = await Modal.create({\n            title: title,\n            body: bodyHTML,\n            large: true,\n            scrollable: true,\n            removeOnClose: true\n        });\n\n        currentModal.getRoot().addClass('local_datacurso_course_ai_modal');\n\n        currentModal.show();\n\n        const bodyEl = currentModal.getBody()[0];\n        initializeChatInterface(bodyEl, params);\n        setupPlanningButtons(bodyEl, params);\n        return currentModal;\n\n    } catch (error) {\n        Notification.exception(error);\n        return null;\n    }\n};\n\n/**\n * Initialize the chat interface\n * @param {Element} container - The modal container element\n * @param {Object} params - The parameters including streaming URL\n */\nconst initializeChatInterface = async (container, params) => {\n    // Find the streaming button and add event listener\n    try {\n        // Start streaming with the URL provided by PHP (already includes session)\n        await startStreaming(params.streamingurl, container);\n        \n    } catch (error) {\n        console.error('Error starting streaming:', error);\n        Notification.exception(error);\n    }\n};\n\n/**\n * Add user message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n */\nconst pushUser = (wrap, text) => addBubble(wrap, text, \"user\");\n\n/**\n * Add message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n * @param {string} role - Message role (user/ai)\n */\nconst addBubble = (wrap, text, role) => {\n  const row = document.createElement(\"div\");\n  row.className = `local_datacurso_ai_msg ${role}`;\n  const bubble = document.createElement(\"div\");\n  bubble.className = \"bubble\";\n  bubble.textContent = text;\n  row.appendChild(bubble);\n  wrap.appendChild(row);\n  scrollToBottom(wrap);\n};\n\n/**\n * Scroll messages to bottom\n * @param {Element} wrap - Messages container\n */\nconst scrollToBottom = (wrap) => {\n  wrap.scrollTop = wrap.scrollHeight;\n};\n\n/**\n * Typewriter effect for streaming text into an element.\n * @param {HTMLElement} element\n * @param {string} text\n * @param {number} speed\n * @returns {Promise<void>}\n */\nfunction typeWriter(element, text, speed) {\n  return new Promise((resolve) => {\n    let i = 0;\n    function typing() {\n      if (i < text.length) {\n        element.textContent += text.charAt(i);\n        i++;\n        setTimeout(typing, speed);\n      } else {\n        resolve();\n      }\n    }\n    typing();\n  });\n}\n\n/**\n * Setup planning buttons event handlers\n * @param {Element} container - The modal container element\n * @param {Object} params - The parameters including course ID\n */\nconst setupPlanningButtons = (container, params) => {\n    const acceptBtn = container.querySelector('#accept-planning-btn');\n    const adjustBtn = container.querySelector('#adjust-planning-btn');\n    const chatInterface = container.querySelector('#course-chat-interface');\n    const chatForm = container.querySelector('#course-chat-form');\n    const chatInput = container.querySelector('#courseChatInput');\n    const streamingContainer = container.querySelector(\"[data-region='local_datacurso/course_streaming']\");\n\n    if (acceptBtn) {\n        acceptBtn.addEventListener('click', async () => {\n            // Disable button to prevent double clicks\n            acceptBtn.disabled = true;\n            acceptBtn.textContent = 'Creating Course...';\n            \n            try {\n                // Here you would call the actual course creation API\n                // For now, just show a success message\n                await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call\n                \n                get_string('addcourseai_done', 'local_datacurso').then((msg) => {\n                    Notification.addNotification({\n                        message: msg,\n                        type: 'success'\n                    });\n                    if (currentModal) {\n                        currentModal.destroy();\n                    }\n                }).catch(() => {\n                    Notification.addNotification({\n                        message: 'Course created successfully!',\n                        type: 'success'\n                    });\n                    if (currentModal) {\n                        currentModal.destroy();\n                    }\n                });\n                \n            } catch (error) {\n                acceptBtn.disabled = false;\n                get_string('accept_planning_create_course', 'local_datacurso').then((msg) => {\n                    acceptBtn.textContent = msg;\n                });\n                Notification.exception(error);\n            }\n        });\n    }\n\n    if (adjustBtn) {\n        adjustBtn.addEventListener('click', () => {\n            // Disable button to prevent double clicks\n            adjustBtn.disabled = true;\n            \n            // Show chat interface\n            if (chatInterface) {\n                chatInterface.style.display = 'block';\n                chatInput.focus();\n            }\n        });\n    }\n\n    // Add Enter key support for chat input\n    if (chatInput) {\n        chatInput.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                if (chatForm) {\n                    chatForm.dispatchEvent(new Event('submit'));\n                }\n            }\n        });\n    }\n\n    if (chatForm) {\n        chatForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            \n            const message = chatInput.value.trim();\n            if (!message) return;\n\n            // Check if streamingContainer exists\n            if (!streamingContainer) {\n                console.error('Streaming container not found');\n                return;\n            }\n\n            // Add user message bubble to streaming container\n            pushUser(streamingContainer, message);\n            \n            // Clear input\n            chatInput.value = '';\n            \n            // Disable form while processing\n            const submitBtn = chatForm.querySelector('button[type=\"submit\"]');\n            submitBtn.disabled = true;\n            \n            try {\n                // Call the plan_course_message via repository\n                const response = await planCourseMessage({\n                    courseid: params.courseid,\n                    text: message,\n                });\n                \n                if (!response.success) {\n                    // Add error message as streaming text\n                    const errorResponse = document.createElement(\"div\");\n                    errorResponse.className = \"mb-3 text-danger\";\n                    streamingContainer.appendChild(errorResponse);\n                    await typeWriter(errorResponse, response.message || 'Error processing your request', 15);\n                }\n\n                // If backend returns a streaming URL, render an inline streaming block and start streaming\n                const streamingUrl = response.data.streamingurl;\n                if (streamingUrl) {\n                    const html = await Templates.render('local_datacurso/course_streaming_inline', {});\n                    const temp = document.createElement('div');\n                    temp.innerHTML = html;\n                    const streamingBlock = temp.firstElementChild;\n                    streamingContainer.appendChild(streamingBlock);\n                    await startStreaming(streamingUrl, streamingBlock);\n                }\n                \n            } catch (error) {\n                // Add error message as streaming text\n                const errorResponse = document.createElement(\"div\");\n                errorResponse.className = \"mb-3 text-danger\";\n                streamingContainer.appendChild(errorResponse);\n                await typeWriter(errorResponse, 'Error: ' + error.message, 15);\n                console.error('Error sending message:', error);\n            } finally {\n                submitBtn.disabled = false;\n            }\n        });\n    }\n};\n\n"],"names":["currentModal","async","params","destroy","title","bodyHTML","Promise","all","Templates","render","Modal","create","body","large","scrollable","removeOnClose","getRoot","addClass","show","bodyEl","getBody","initializeChatInterface","setupPlanningButtons","error","exception","container","streamingurl","console","addBubble","wrap","text","role","row","document","createElement","className","bubble","textContent","appendChild","scrollToBottom","scrollTop","scrollHeight","typeWriter","element","speed","resolve","i","typing","length","charAt","setTimeout","acceptBtn","querySelector","adjustBtn","chatInterface","chatForm","chatInput","streamingContainer","addEventListener","disabled","then","msg","addNotification","message","type","catch","style","display","focus","e","key","shiftKey","preventDefault","dispatchEvent","Event","value","trim","submitBtn","response","courseid","success","errorResponse","streamingUrl","data","html","temp","innerHTML","streamingBlock","firstElementChild"],"mappings":"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"}
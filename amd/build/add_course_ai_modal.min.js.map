{"version":3,"file":"add_course_ai_modal.min.js","sources":["../src/add_course_ai_modal.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course AI Modal Module using Moodle's modal factory\n *\n * @module     local_datacurso/add_course_ai_modal\n * @copyright  2025 Buendata <soluciones@buendata.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {get_string} from 'core/str';\nimport {startStreaming, startExecutionStreaming} from 'local_datacurso/course_streaming';\nimport {planCourseMessage, planCourseExecute} from 'local_datacurso/repository/chatbot';\n\nlet currentModal = null;\n\n// Global state for scroll behavior\nlet userHasScrolled = false;\nlet scrollTimeout = null;\n\n/**\n * Check if user is at the bottom of the scrollable container\n * @param {Element} element - The scrollable element\n * @returns {boolean} - True if user is at bottom\n */\nconst isAtBottom = (element) => {\n  const threshold = 50; // 50px threshold\n  return element.scrollTop + element.clientHeight >= element.scrollHeight - threshold;\n};\n\n/**\n * Setup scroll detection to pause auto-scroll when user scrolls manually\n * @param {Element} scrollContainer - The container to monitor for scroll\n */\nconst setupScrollDetection = (scrollContainer) => {\n  if (!scrollContainer) return;\n  \n  const handleScroll = () => {\n    // Clear existing timeout\n    if (scrollTimeout) {\n      clearTimeout(scrollTimeout);\n    }\n    \n    // Mark that user has scrolled\n    userHasScrolled = true;\n    \n    // Check if user scrolled back to bottom\n    if (isAtBottom(scrollContainer)) {\n      // Reset flag after a short delay to resume auto-scroll\n      scrollTimeout = setTimeout(() => {\n        userHasScrolled = false;\n      }, 1000);\n    }\n  };\n  \n  scrollContainer.addEventListener('scroll', handleScroll, { passive: true });\n};\n\n/**\n * Initialize and show the course AI modal\n * @param {Object} params - Parameters object\n * @param {string} params.streamingurl - The complete URL for course streaming (including session)\n * @returns {Promise}\n */\nexport const init = async(params = {}) => {\n    try {\n        // Close existing modal if open\n        if (currentModal) {\n            currentModal.destroy();\n            currentModal = null;\n        }\n\n        // Get modal title and body content\n        const [title, bodyHTML] = await Promise.all([\n            get_string('addcourseai_modaltitle', 'local_datacurso'),\n            Templates.render('local_datacurso/add_course_ai_modal', {})\n        ]);\n\n        // Create modal using modern Modal class\n        currentModal = await Modal.create({\n            title: title,\n            body: bodyHTML,\n            large: true,\n            scrollable: true,\n            removeOnClose: true\n        });\n\n        currentModal.getRoot().addClass('local_datacurso_course_ai_modal');\n\n        currentModal.show();\n\n        const bodyEl = currentModal.getBody()[0];\n        \n        // Reset scroll state and setup detection\n        userHasScrolled = false;\n        if (scrollTimeout) {\n          clearTimeout(scrollTimeout);\n          scrollTimeout = null;\n        }\n        \n        // Setup scroll detection on modal body\n        const modalBody = currentModal.getBody()[0];\n        if (modalBody) {\n          setupScrollDetection(modalBody);\n        }\n        \n        initializeChatInterface(bodyEl, params);\n        setupPlanningButtons(bodyEl, params);\n        setupPlanningToggle(bodyEl);\n        return currentModal;\n\n    } catch (error) {\n        Notification.exception(error);\n        return null;\n    }\n};\n\n/**\n * Initialize the chat interface\n * @param {Element} container - The modal container element\n * @param {Object} params - The parameters including streaming URL\n */\nconst initializeChatInterface = async (container, params) => {\n    // Find the streaming button and add event listener\n    try {\n        // Ensure chat interface is hidden when (re)starting streaming\n        const chatInterface = container.querySelector('#course-chat-interface');\n        if (chatInterface) {\n            chatInterface.style.display = 'none';\n        }\n\n        // Start streaming with the URL provided by PHP (already includes session)\n        await startStreaming(params.streamingurl, container);\n        \n    } catch (error) {\n        console.error('Error starting streaming:', error);\n        Notification.exception(error);\n    }\n};\n\n/**\n * Add user message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n */\nconst pushUser = (wrap, text) => addBubble(wrap, text, \"user\");\n\n/**\n * Add message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n * @param {string} role - Message role (user/ai)\n */\nconst addBubble = (wrap, text, role) => {\n  const row = document.createElement(\"div\");\n  row.className = `local_datacurso_ai_msg ${role}`;\n  const bubble = document.createElement(\"div\");\n  bubble.className = \"bubble\";\n  bubble.textContent = text;\n  row.appendChild(bubble);\n  wrap.appendChild(row);\n  scrollToBottom(wrap);\n};\n\n/**\n * Scroll messages to bottom smoothly - only if user hasn't scrolled\n * @param {Element} wrap - Messages container\n */\nconst scrollToBottom = (wrap) => {\n  if (!userHasScrolled) {\n    const modalBody = document.querySelector('.modal-body');\n    if (modalBody) {\n      modalBody.scrollTop = modalBody.scrollHeight;\n    } else {\n      wrap.scrollTop = wrap.scrollHeight;\n    }\n  }\n};\n\n/**\n * Typewriter effect for streaming text into an element with auto-scroll.\n * @param {HTMLElement} element\n * @param {string} text\n * @param {number} speed\n * @returns {Promise<void>}\n */\nfunction typeWriter(element, text, speed) {\n  return new Promise((resolve) => {\n    let i = 0;\n    function typing() {\n      if (i < text.length) {\n        element.textContent += text.charAt(i);\n        i++;\n        \n        // Auto-scroll during typewriter effect - only if user hasn't scrolled\n        if (!userHasScrolled) {\n          const modalBody = document.querySelector('.modal-body');\n          if (modalBody) {\n            modalBody.scrollTop = modalBody.scrollHeight;\n          }\n        }\n        \n        setTimeout(typing, speed);\n      } else {\n        resolve();\n      }\n    }\n    typing();\n  });\n}\n\n/**\n * Collapse the planning phase and show summary\n * @param {Element} container - The modal container element\n */\nconst collapsePlanningPhase = (container) => {\n    const planningPhase = container.querySelector('#planning-phase-section');\n    const planningSummary = container.querySelector('#planning-summary-collapsed');\n    const planningDetailsContent = container.querySelector('#planning-details-content');\n    \n    if (planningPhase && planningSummary && planningDetailsContent) {\n        // Move planning content to collapsed section\n        const planningContent = planningPhase.innerHTML;\n        planningDetailsContent.innerHTML = planningContent;\n        \n        // Hide planning phase and show summary\n        planningPhase.style.display = 'none';\n        planningSummary.style.display = 'block';\n    }\n};\n\n/**\n * Setup collapsible planning details toggle\n * @param {Element} container - The modal container element\n */\nconst setupPlanningToggle = (container) => {\n    const toggleBtn = container.querySelector('#toggle-planning-details');\n    const collapseElement = container.querySelector('#planning-details-collapse');\n    const toggleIcon = container.querySelector('#planning-toggle-icon');\n    \n    if (toggleBtn && collapseElement && toggleIcon) {\n        toggleBtn.addEventListener('click', () => {\n            const isCollapsed = !collapseElement.classList.contains('show');\n            \n            if (isCollapsed) {\n                collapseElement.classList.add('show');\n                toggleIcon.classList.remove('fa-chevron-down');\n                toggleIcon.classList.add('fa-chevron-up');\n            } else {\n                collapseElement.classList.remove('show');\n                toggleIcon.classList.remove('fa-chevron-up');\n                toggleIcon.classList.add('fa-chevron-down');\n            }\n        });\n    }\n};\n\n/**\n * Setup planning buttons event handlers\n * @param {Element} container - The modal container element\n * @param {Object} params - The parameters including course ID\n */\nconst setupPlanningButtons = (container, params) => {\n    const acceptBtn = container.querySelector('#accept-planning-btn');\n    const adjustBtn = container.querySelector('#adjust-planning-btn');\n    const chatInterface = container.querySelector('#course-chat-interface');\n    const chatForm = container.querySelector('#course-chat-form');\n    const chatInput = container.querySelector('#courseChatInput');\n    const streamingContainer = container.querySelector(\"[data-region='local_datacurso/course_streaming']\");\n\n    if (acceptBtn) {\n        acceptBtn.addEventListener('click', async () => {\n            // Disable button to prevent double clicks\n            acceptBtn.disabled = true;\n            acceptBtn.textContent = await get_string('creating_course', 'local_datacurso');\n            \n            try {\n                // Extract course ID from streaming URL or use params.courseid\n                const courseId = params.courseid;\n                \n                if (!courseId) {\n                    throw new Error(await get_string('error_no_course_id', 'local_datacurso'));\n                }\n\n                // Call the plan course execute webservice\n                const response = await planCourseExecute(courseId);\n                \n                if (!response.success) {\n                    throw new Error(response.message || await get_string('error_executing_plan', 'local_datacurso'));\n                }\n\n                // Hide planning buttons since execution has started\n                const planningActions = container.querySelector('#course-planning-actions');\n                if (planningActions) {\n                    planningActions.style.display = 'none';\n                }\n\n                // Collapse planning phase and show execution phase\n                collapsePlanningPhase(container);\n\n                // Get execution container\n                const executionContainer = container.querySelector('#execution-phase-container');\n\n                // Start execution streaming\n                if (response.data && response.data.streamingurl && executionContainer) {\n                    \n                    // Create streaming block template with execution-specific texts\n                    const html = await Templates.render('local_datacurso/course_streaming_inline', {\n                        title: await get_string('course_creating_title', 'local_datacurso'),\n                        subtitle: await get_string('course_creating_subtitle', 'local_datacurso')\n                    });\n                    const temp = document.createElement('div');\n                    temp.innerHTML = html;\n                    const streamingBlock = temp.firstElementChild;\n                    executionContainer.appendChild(streamingBlock);\n                    await startExecutionStreaming(response.data.streamingurl, streamingBlock, courseId);\n                }\n\n                // Show success notification after execution completes\n                const message = await get_string('addcourseai_done', 'local_datacurso')\n                Notification.addNotification({\n                    message: message,\n                    type: 'success'\n                });\n                \n            } catch (error) {\n                console.error('Error creating course:', error);\n                acceptBtn.disabled = false;\n                acceptBtn.textContent = await get_string('accept_planning_create_course', 'local_datacurso');\n                Notification.exception(error);\n            }\n        });\n    }\n\n    if (adjustBtn) {\n        adjustBtn.addEventListener('click', () => {\n            // Disable button to prevent double clicks\n            adjustBtn.disabled = true;\n            \n            // Show chat interface\n            if (chatInterface) {\n                chatInterface.style.display = 'block';\n                chatInput.focus();\n            }\n        });\n    }\n\n    // Add Enter key support for chat input\n    if (chatInput) {\n        chatInput.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                if (chatForm) {\n                    chatForm.dispatchEvent(new Event('submit'));\n                }\n            }\n        });\n    }\n\n    if (chatForm) {\n        chatForm.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            \n            const message = chatInput.value.trim();\n            if (!message) return;\n\n            // Check if streamingContainer exists\n            if (!streamingContainer) {\n                console.error('Streaming container not found');\n                return;\n            }\n\n            // Add user message bubble to streaming container\n            pushUser(streamingContainer, message);\n            \n            // Clear input\n            chatInput.value = '';\n            \n            // Disable form while processing\n            const submitBtn = chatForm.querySelector('button[type=\"submit\"]');\n            submitBtn.disabled = true;\n            \n            try {\n                // Call the plan_course_message via repository\n                const response = await planCourseMessage({\n                    courseid: params.courseid,\n                    text: message,\n                });\n                \n                if (!response.success) {\n                    // Add error message as streaming text\n                    const errorResponse = document.createElement(\"div\");\n                    errorResponse.className = \"mb-3 text-danger\";\n                    streamingContainer.appendChild(errorResponse);\n                    const errorMsg = response.message || await get_string('error_processing_request', 'local_datacurso');\n                    await typeWriter(errorResponse, errorMsg, 15);\n                    return;\n                }\n\n                // If backend returns a streaming URL, render an inline streaming block and start streaming\n                const streamingUrl = response.data.streamingurl;\n                if (streamingUrl) {\n                    // Hide chat interface when a new streaming session starts\n                    if (chatInterface) {\n                        chatInterface.style.display = 'none';\n                    }\n\n                    // Add a separator to distinguish the correction from previous content\n                    const separator = document.createElement('div');\n                    separator.className = 'mt-4 mb-3 border-top pt-3';\n                    const correctionText = await get_string('adjust_planning_title', 'local_datacurso');\n                    separator.innerHTML = `<h6 class=\"text-muted\"><i class=\"fa fa-edit\"></i> ${correctionText}</h6>`;\n                    streamingContainer.appendChild(separator);\n\n                    const html = await Templates.render('local_datacurso/course_streaming_inline', {});\n                    const temp = document.createElement('div');\n                    temp.innerHTML = html;\n                    const streamingBlock = temp.firstElementChild;\n                    streamingContainer.appendChild(streamingBlock);\n                    await startStreaming(streamingUrl, streamingBlock, true); // Pass true to indicate this is a correction\n                }\n                \n            } catch (error) {\n                // Add error message as streaming text\n                const errorResponse = document.createElement(\"div\");\n                errorResponse.className = \"mb-3 text-danger\";\n                streamingContainer.appendChild(errorResponse);\n                const errorMsg = await get_string('error_sending_message', 'local_datacurso');\n                await typeWriter(errorResponse, `${errorMsg}: ${error.message}`, 15);\n                console.error('Error sending message:', error);\n            } finally {\n                submitBtn.disabled = false;\n            }\n        });\n    }\n};\n\n"],"names":["currentModal","userHasScrolled","scrollTimeout","setupScrollDetection","scrollContainer","addEventListener","element","clearTimeout","scrollTop","clientHeight","scrollHeight","setTimeout","passive","async","params","destroy","title","bodyHTML","Promise","all","Templates","render","Modal","create","body","large","scrollable","removeOnClose","getRoot","addClass","show","bodyEl","getBody","modalBody","initializeChatInterface","setupPlanningButtons","setupPlanningToggle","error","exception","container","chatInterface","querySelector","style","display","streamingurl","console","addBubble","wrap","text","role","row","document","createElement","className","bubble","textContent","appendChild","scrollToBottom","typeWriter","speed","resolve","i","typing","length","charAt","toggleBtn","collapseElement","toggleIcon","classList","contains","add","remove","acceptBtn","adjustBtn","chatForm","chatInput","streamingContainer","disabled","courseId","courseid","Error","response","success","message","planningActions","planningPhase","planningSummary","planningDetailsContent","planningContent","innerHTML","collapsePlanningPhase","executionContainer","data","html","subtitle","temp","streamingBlock","firstElementChild","addNotification","type","focus","e","key","shiftKey","preventDefault","dispatchEvent","Event","value","trim","submitBtn","errorResponse","errorMsg","streamingUrl","separator","correctionText"],"mappings":"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"}
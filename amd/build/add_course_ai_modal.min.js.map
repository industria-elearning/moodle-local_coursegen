{"version":3,"file":"add_course_ai_modal.min.js","sources":["../src/add_course_ai_modal.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course AI Modal Module using Moodle's modal factory\n *\n * @module     local_datacurso/add_course_ai_modal\n * @copyright  2025 Buendata <soluciones@buendata.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {get_string} from 'core/str';\nimport * as chatbotRepository from 'local_datacurso/repository/chatbot';\n\nlet currentModal = null;\n\n/**\n * Initialize and show the course AI modal\n * @returns {Promise}\n */\nexport const init = async() => {\n    try {\n        // Close existing modal if open\n        if (currentModal) {\n            currentModal.destroy();\n            currentModal = null;\n        }\n\n        // Get modal title and body content\n        const [title, bodyHTML] = await Promise.all([\n            get_string('addcourseai_modaltitle', 'local_datacurso'),\n            Templates.render('local_datacurso/add_course_ai_modal', {})\n        ]);\n\n        // Create modal using modern Modal class\n        currentModal = await Modal.create({\n            title: title,\n            body: bodyHTML,\n            large: true,\n            scrollable: true,\n            removeOnClose: true\n        });\n\n        currentModal.getRoot().addClass('local_datacurso_course_ai_modal');\n\n        currentModal.show();\n\n        const bodyEl = currentModal.getBody()[0];\n        initializeChatInterface(bodyEl);\n        return currentModal;\n\n    } catch (error) {\n        Notification.exception(error);\n        return null;\n    }\n};\n\n/**\n * Initialize the chat interface\n * @param {Element} container - The modal container element\n * @param {Object} payload - The payload data\n */\nconst initializeChatInterface = (container, payload) => {\n  const messagesEl = container.querySelector(\".local_datacurso_ai_messages\");\n  const form = container.querySelector(\"form.local_datacurso_ai_input\");\n  const textarea = form.querySelector(\"textarea\");\n  const sendBtn = form.querySelector(\".local_datacurso_ai_send\");\n\n  // Welcome message\n  get_string('addcourseai_welcome', 'local_datacurso').then((welcomeMsg) => {\n    pushAI(messagesEl, welcomeMsg);\n    return welcomeMsg;\n  }).catch(() => {\n    // Fallback welcome message\n    pushAI(messagesEl, 'Hi! Tell me what course you need and I will help you create it. 😊');\n  });\n\n  // Handle form submission\n  form.addEventListener(\"submit\", async (e) => {\n    e.preventDefault();\n    const prompt = textarea.value.trim();\n    if (!prompt) {\n      return;\n    }\n\n    // Get generate images option\n    const generateImages =\n      document.querySelector('input[name=\"generate_images\"]:checked')?.value ||\n      \"no\";\n\n    // Add user message\n    pushUser(messagesEl, prompt);\n    textarea.value = \"\";\n    textarea.focus();\n\n    // Disable form elements\n    setFormDisabled(true);\n    setLoading(sendBtn, true);\n    const typing = pushTyping(messagesEl);\n\n    try {\n      // Call API to create course\n      const response = await chatbotRepository.createCourse({\n        categoryid: payload.categoryid || 1, // Default to category 1 if not provided\n        prompt,\n        generateimages: generateImages,\n      });\n\n      if (!response.success) {\n        throw new Error(response.message || 'Course creation failed');\n      }\n\n      removeTyping(typing);\n      renderWSResult(messagesEl, response);\n\n      // Reload page after success\n      setTimeout(() => {\n        window.location.href = response.courseurl;\n      }, 800);\n    } catch (error) {\n      console.log(error);\n      removeTyping(typing);\n\n      if (!error) {\n        // Handle timeout case\n        const successMsg = await get_string(\n          \"coursecreatedsuccess\",\n          \"local_datacurso\"\n        );\n        pushAI(messagesEl, successMsg);\n        setTimeout(() => {\n          window.location.reload();\n        }, 800);\n      } else {\n        // Handle other errors\n        const errorMsg = await get_string(\n          \"addcourseai_error\",\n          \"local_datacurso\"\n        );\n        pushAI(messagesEl, `❌ ${errorMsg}`);\n      }\n    } finally {\n      setFormDisabled(false);\n      setLoading(sendBtn, false);\n      scrollToBottom(messagesEl);\n    }\n  });\n\n  // Handle Enter key for sending\n  textarea.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      form.requestSubmit();\n    }\n  });\n\n  /**\n   * Enable/disable form elements\n   * @param {boolean} disabled - Whether to disable the form\n   */\n  function setFormDisabled(disabled) {\n    textarea.disabled = disabled;\n    sendBtn.disabled = disabled;\n    const radioButtons = document.querySelectorAll(\n      'input[name=\"generate_images\"]'\n    );\n    radioButtons.forEach((rb) => {\n      rb.disabled = disabled;\n    });\n  }\n};\n\n/**\n * Add user message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n */\nconst pushUser = (wrap, text) => addBubble(wrap, text, \"user\");\n\n/**\n * Add AI message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n */\nconst pushAI = (wrap, text) => addBubble(wrap, text, \"ai\");\n\n/**\n * Add message bubble\n * @param {Element} wrap - Messages container\n * @param {string} text - Message text\n * @param {string} role - Message role (user/ai)\n */\nconst addBubble = (wrap, text, role) => {\n  const row = document.createElement(\"div\");\n  row.className = `local_datacurso_ai_msg ${role}`;\n  const bubble = document.createElement(\"div\");\n  bubble.className = \"bubble\";\n  bubble.textContent = text;\n  row.appendChild(bubble);\n  wrap.appendChild(row);\n  scrollToBottom(wrap);\n};\n\n/**\n * Add typing indicator\n * @param {Element} wrap - Messages container\n * @returns {Element} The typing element\n */\nconst pushTyping = (wrap) => {\n  const row = document.createElement(\"div\");\n  row.className = \"local_datacurso_ai_msg ai local_datacurso_ai_typing\";\n  const bubble = document.createElement(\"div\");\n  bubble.className = \"bubble\";\n  bubble.innerHTML =\n    '<span class=\"dot\"></span><span class=\"dot\"></span><span class=\"dot\"></span>';\n  row.appendChild(bubble);\n  wrap.appendChild(row);\n  scrollToBottom(wrap);\n  return row;\n};\n\n/**\n * Remove typing indicator\n * @param {Element} el - The typing element to remove\n */\nconst removeTyping = (el) => el?.remove();\n\n/**\n * Scroll messages to bottom\n * @param {Element} wrap - Messages container\n */\nconst scrollToBottom = (wrap) => {\n  wrap.scrollTop = wrap.scrollHeight;\n};\n\n/**\n * Set loading state for button\n * @param {Element} btn - Button element\n * @param {boolean} isLoading - Loading state\n */\nconst setLoading = (btn, isLoading) => {\n  btn.disabled = isLoading;\n  btn.style.opacity = isLoading ? 0.7 : 1;\n};\n\n/**\n * Render WebService result\n * @param {Element} wrap - Messages container\n * @param {Object} response - API response\n */\nconst renderWSResult = (wrap, response) => {\n  const lines = [];\n\n  if (response?.success === false) {\n    if (response?.message) {\n      pushAI(wrap, response.message);\n    } else {\n      get_string(\"addcourseai_faildefault\", \"local_datacurso\").then((msg) => {\n        pushAI(wrap, msg);\n        return msg;\n      }).catch(() => {\n        pushAI(wrap, 'It was not possible to create the course.');\n      });\n    }\n    return;\n  }\n\n  if (response?.message) {\n    lines.push(response.message);\n  }\n\n  if (lines.length) {\n    pushAI(wrap, lines.join(\"\\n\"));\n    setTimeout(() => {\n      const last = wrap.querySelector(\".local_datacurso_ai_msg.ai:last-child .bubble\");\n      if (last) {\n        last.textContent = lines.join(\"\\n\");\n      }\n    }, 50);\n  } else {\n    get_string(\"addcourseai_done\", \"local_datacurso\").then((msg) => {\n      pushAI(wrap, msg);\n      return msg;\n    }).catch(() => {\n      pushAI(wrap, 'Done! The course was created successfully.');\n    });\n  }\n};\n"],"names":["currentModal","async","destroy","title","bodyHTML","Promise","all","Templates","render","Modal","create","body","large","scrollable","removeOnClose","getRoot","addClass","show","bodyEl","getBody","initializeChatInterface","error","exception","container","payload","messagesEl","querySelector","form","textarea","sendBtn","setFormDisabled","disabled","document","querySelectorAll","forEach","rb","then","welcomeMsg","pushAI","catch","addEventListener","e","preventDefault","prompt","value","trim","generateImages","pushUser","focus","setLoading","typing","pushTyping","response","chatbotRepository","createCourse","categoryid","generateimages","success","Error","message","removeTyping","renderWSResult","setTimeout","window","location","href","courseurl","console","log","errorMsg","successMsg","reload","scrollToBottom","key","shiftKey","requestSubmit","wrap","text","addBubble","role","row","createElement","className","bubble","textContent","appendChild","innerHTML","el","remove","scrollTop","scrollHeight","btn","isLoading","style","opacity","lines","push","length","join","last","msg"],"mappings":"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"}
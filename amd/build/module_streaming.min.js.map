{"version":3,"file":"module_streaming.min.js","sources":["../src/module_streaming.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module Streaming Module for handling real-time module generation\n *\n * @module     local_datacurso/module_streaming\n * @copyright  2025 Wilber Narvaez <https://datacurso.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string} from \"core/str\";\n\n// Global state for scroll behavior\nlet userHasScrolled = false;\nlet scrollTimeout = null;\n\n/**\n * Check if user is at the bottom of the scrollable container\n * @param {Element} element - The scrollable element\n * @returns {boolean} - True if user is at bottom\n */\nconst isAtBottom = (element) => {\n  const threshold = 50; // 50px threshold\n  return (\n    element.scrollTop + element.clientHeight >= element.scrollHeight - threshold\n  );\n};\n\n/**\n * Setup scroll detection to pause auto-scroll when user scrolls manually\n * @param {Element} scrollContainer - The container to monitor for scroll\n */\nconst setupScrollDetection = (scrollContainer) => {\n  if (!scrollContainer) {\n    return;\n  }\n\n  const handleScroll = () => {\n    // Clear existing timeout\n    if (scrollTimeout) {\n      clearTimeout(scrollTimeout);\n    }\n\n    // Mark that user has scrolled\n    userHasScrolled = true;\n\n    // Check if user scrolled back to bottom\n    if (isAtBottom(scrollContainer)) {\n      // Reset flag after a short delay to resume auto-scroll\n      scrollTimeout = setTimeout(() => {\n        userHasScrolled = false;\n      }, 1000);\n    }\n  };\n\n  scrollContainer.addEventListener(\"scroll\", handleScroll, { passive: true });\n};\n\n/**\n * Add status message to the streaming container with smart scrolling\n * @param {string} message - Status message\n * @param {string} type - Status type (info, success, warning, error)\n * @param {Element} container - Container element\n */\nconst addStatus = (message, type, container) => {\n  const statusDiv = document.createElement(\"div\");\n  // Map status types to Bootstrap alert classes\n  const alertClassMap = {\n    success: \"success\",\n    error: \"danger\",\n    warning: \"warning\",\n    info: \"info\"\n  };\n\n  statusDiv.className = `alert alert-${alertClassMap[type] || \"info\"} mb-2`;\n  statusDiv.innerHTML = `<small>${message}</small>`;\n  container.appendChild(statusDiv);\n\n  // Only auto-scroll if user hasn't manually scrolled\n  if (!userHasScrolled) {\n    const modalBody = document.querySelector(\".modal-body\");\n    if (modalBody) {\n      modalBody.scrollTop = modalBody.scrollHeight;\n    } else {\n      container.scrollTop = container.scrollHeight;\n    }\n  }\n};\n\n/**\n * Start module streaming from the provided URL\n * @param {string} streamingUrl - The EventSource URL for streaming\n * @param {Element} container - Container element for displaying results\n * @param {Object} params - Additional parameters (courseid, sectionnum, beforemod)\n */\nexport const startModuleStreaming = async (\n  streamingUrl,\n  container,\n  params = {}\n) => {\n  const progressIndicator = container.querySelector(\n    \"[data-region='local_datacurso/course_streaming/progress']\"\n  );\n  const eventList = container.querySelector(\n    \"[data-region='local_datacurso/course_streaming']\"\n  );\n  const progressIcon = container.querySelector(\n    \"[data-region='local_datacurso/course_streaming/progress/icon']\"\n  );\n\n  // Clear previous content\n  if (eventList) {\n    eventList.innerHTML = \"\";\n  }\n  if (progressIndicator) {\n    progressIndicator.style.display = \"block\";\n  }\n\n  // Reset scroll state for new streaming session\n  userHasScrolled = false;\n  if (scrollTimeout) {\n    clearTimeout(scrollTimeout);\n    scrollTimeout = null;\n  }\n\n  // Setup scroll detection on modal body\n  const modalBody = document.querySelector(\".modal-body\");\n  if (modalBody) {\n    setupScrollDetection(modalBody);\n  }\n\n  const es = new EventSource(streamingUrl);\n\n  // Essential event handlers for module creation\n  const onResourceStart = async () => {\n    const message = await get_string(\n      \"module_streaming_start\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"info\", eventList);\n  };\n\n  const onSchemaStart = async () => {\n    const message = await get_string(\n      \"module_streaming_schema_start\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"info\", eventList);\n  };\n\n  const onSchemaDone = async () => {\n    const message = await get_string(\n      \"module_streaming_schema_done\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"success\", eventList);\n  };\n\n  const onImagesStart = async () => {\n    const message = await get_string(\n      \"module_streaming_images_start\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"info\", eventList);\n  };\n\n  const onImagesDone = async () => {\n    const message = await get_string(\n      \"module_streaming_images_done\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"success\", eventList);\n  };\n\n  const onParametersStart = async () => {\n    const message = await get_string(\n      \"module_streaming_parameters_start\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"info\", eventList);\n  };\n\n  const onParametersDone = async () => {\n    const message = await get_string(\n      \"module_streaming_parameters_done\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"success\", eventList);\n  };\n\n  const onOutputStart = async () => {\n    const message = await get_string(\n      \"module_streaming_output_start\",\n      \"local_datacurso\"\n    );\n    addStatus(message, \"info\", eventList);\n  };\n\n  const onResourceComplete = async () => {\n    // Close the EventSource connection first\n    es.close();\n\n    if (progressIcon) {\n      progressIcon.innerHTML = `\n        <div class=\"bg-success rounded-circle d-flex align-items-center justify-content-center\"\n             style=\"width: 1.5rem; height: 1.5rem;\">\n          <i class=\"text-white\" style=\"font-size: 0.8rem;\">✓</i>\n        </div>\n      `;\n    }\n\n    const completeMessage = await get_string(\n      \"module_streaming_complete\",\n      \"local_datacurso\"\n    );\n    addStatus(completeMessage, \"success\", eventList);\n\n    try {\n      const { createMod } = await import(\"local_datacurso/repository/chatbot\");\n      const response = await createMod({\n        courseid: params.courseid,\n        sectionnum: params.sectionnum,\n        beforemod: params.beforemod,\n        jobid: params.jobid,\n      });\n      if (response && response.ok) {\n        const successMessage = await get_string(\n          \"module_streaming_added_success\",\n          \"local_datacurso\"\n        );\n        addStatus(successMessage, \"success\", eventList);\n        setTimeout(() => {\n          window.location.href = response.data.activityurl;\n        }, 1000);\n      } else {\n        const defaultError = await get_string(\n          \"module_streaming_add_error\",\n          \"local_datacurso\"\n        );\n        const msg =\n          response && response.message ? response.message : defaultError;\n        addStatus(`⚠️ ${msg}`, \"error\", eventList);\n      }\n    } catch (err) {\n      const errorMessage = await get_string(\n        \"module_streaming_add_problem\",\n        \"local_datacurso\",\n        err?.message || err\n      );\n      addStatus(`⚠️ ${errorMessage}`, \"error\", eventList);\n    }\n  };\n\n  const onError = async () => {\n    es.close();\n    const errorMessage = await get_string(\n      \"module_streaming_creation_error\",\n      \"local_datacurso\"\n    );\n    addStatus(errorMessage, \"error\", eventList);\n  };\n\n  const generateImages = Number(params.generateimages) || 0;\n\n  // Register only essential event listeners for better user experience\n  es.addEventListener(\"resource_start\", onResourceStart);\n  es.addEventListener(\"resource_schema_start\", onSchemaStart);\n  es.addEventListener(\"resource_schema_done\", onSchemaDone);\n  if (generateImages === 1) {\n    es.addEventListener(\"resource_images_start\", onImagesStart);\n    es.addEventListener(\"resource_images_done\", onImagesDone);\n  }\n  es.addEventListener(\"resource_parameters_start\", onParametersStart);\n  es.addEventListener(\"resource_parameters_done\", onParametersDone);\n  es.addEventListener(\"resource_output_start\", onOutputStart);\n  es.addEventListener(\"resource_complete\", onResourceComplete);\n  es.addEventListener(\"error\", onError);\n};\n"],"names":["userHasScrolled","scrollTimeout","setupScrollDetection","scrollContainer","addEventListener","element","clearTimeout","scrollTop","clientHeight","scrollHeight","setTimeout","passive","addStatus","message","type","container","statusDiv","document","createElement","className","success","error","warning","info","innerHTML","appendChild","modalBody","querySelector","async","streamingUrl","params","progressIndicator","eventList","progressIcon","style","display","es","EventSource","onResourceStart","onSchemaStart","onSchemaDone","onImagesStart","onImagesDone","onParametersStart","onParametersDone","onOutputStart","onResourceComplete","close","completeMessage","createMod","response","courseid","sectionnum","beforemod","jobid","ok","successMessage","window","location","href","data","activityurl","defaultError","msg","err","errorMessage","onError","generateImages","Number","generateimages"],"mappings":"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"}
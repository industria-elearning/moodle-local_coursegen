{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Floating chat for AI assistant in course contexts (con SSE)\n *\n * @module     local_datacurso/chat\n * @copyright  2025 Datacurso\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/ajax', 'core/notification'], function (Ajax, notification) {\n    'use strict';\n\n    class DatacursoChat {\n        /**\n         * Constructor for DatacursoChat class.\n         * Initializes chat widget state and starts initialization.\n         */\n        constructor() {\n            this.chatWidget = null;\n            this.isMinimized = true;\n            this.userRole = 'Estudiante';\n            this.courseId = null;\n            this.isInCourseContext = false;\n\n            // Estado SSE\n            this.currentEventSource = null;\n            this.currentAIMessageEl = null;\n            this.streaming = false;\n\n            this.init();\n        }\n\n        /**\n         * Initializes the chat widget if in course context.\n         */\n        init() {\n            try {\n                if (!this.checkCourseContext()) return;\n                this.detectUserRole();\n                this.createChatWidget();\n                this.addEventListeners();\n            } catch (error) {\n                if (window.console) console.error('Error initializing chat:', error);\n            }\n        }\n\n        /**\n         * Checks if the current page is in a course context.\n         * @returns {boolean}\n         */\n        checkCourseContext() {\n            try {\n                if (window.datacurso_chat_config && window.datacurso_chat_config.courseid > 0) {\n                    this.courseId = parseInt(window.datacurso_chat_config.courseid, 10);\n                    this.isInCourseContext = true;\n                    return true;\n                }\n\n                const url = window.location.href;\n                const courseMatch = url.match(/course\\/view\\.php\\?id=(\\d+)/);\n                const modMatch = url.match(/mod\\/\\w+\\/view\\.php.*course=(\\d+)/);\n                const activityMatch = url.match(/course\\/modedit\\.php.*course=(\\d+)/);\n\n                if (courseMatch) {\n                    this.courseId = parseInt(courseMatch[1], 10);\n                    this.isInCourseContext = true;\n                    return true;\n                } else if (modMatch) {\n                    this.courseId = parseInt(modMatch[1], 10);\n                    this.isInCourseContext = true;\n                    return true;\n                } else if (activityMatch) {\n                    this.courseId = parseInt(activityMatch[1], 10);\n                    this.isInCourseContext = true;\n                    return true;\n                }\n\n                const courseContent = document.querySelector('#page-course-view') ||\n                    document.querySelector('.course-content') ||\n                    document.querySelector('[data-region=\"course-content\"]') ||\n                    document.querySelector('body.path-course') ||\n                    document.querySelector('body.path-mod');\n\n                if (courseContent) {\n                    const courseIdElement = document.querySelector('[data-courseid]');\n                    if (courseIdElement) {\n                        const courseIdValue = courseIdElement.getAttribute('data-courseid');\n                        if (courseIdValue && !isNaN(courseIdValue)) this.courseId = parseInt(courseIdValue, 10);\n                    }\n                    this.isInCourseContext = true;\n                    return true;\n                }\n\n                return false;\n            } catch (error) {\n                if (window.console) console.warn('Error checking course context:', error);\n                return false;\n            }\n        }\n\n        /**\n         * Detects the user's role (Teacher or Student).\n         */\n        detectUserRole() {\n            try {\n                if (window.datacurso_chat_config && window.datacurso_chat_config.userrole) {\n                    const role = window.datacurso_chat_config.userrole;\n                    if (typeof role === 'string' && role.trim()) {\n                        this.userRole = role.trim();\n                        return;\n                    }\n                }\n\n                const teacherElements = [\n                    '.editing',\n                    '[data-role=\"teacher\"]',\n                    '.teacher-view',\n                    '.course-editing',\n                    'body.editing'\n                ];\n\n                for (const selector of teacherElements) {\n                    try {\n                        if (document.querySelector(selector)) {\n                            this.userRole = 'Profesor';\n                            return;\n                        }\n                    } catch (_) {}\n                }\n\n                const userMenu = document.querySelector('.usermenu') || document.querySelector('.user-menu');\n                if (userMenu && userMenu.textContent && userMenu.textContent.toLowerCase().includes('profesor')) {\n                    this.userRole = 'Profesor';\n                    return;\n                }\n\n                if (document.querySelector('a[href*=\"edit=on\"]') ||\n                    document.querySelector('.turn-editing-on') ||\n                    document.querySelector('.editing-on')) {\n                    this.userRole = 'Profesor';\n                    return;\n                }\n\n                this.userRole = 'Estudiante';\n            } catch (error) {\n                if (window.console) console.warn('Error detecting user role:', error);\n                this.userRole = 'Estudiante';\n            }\n        }\n\n        /**\n         * Creates the chat widget and appends it to the DOM.\n         */\n        createChatWidget() {\n            const chatHTML = `\n                <div class=\"datacurso-chat-widget\" id=\"datacursoChat\">\n                    <div class=\"datacurso-chat-header\" id=\"chatHeader\">\n                        <div class=\"datacurso-chat-header-content\">\n                            <h3>Asistente IA</h3>\n                            <span class=\"datacurso-chat-role\" id=\"userRole\">${this.userRole}</span>\n                        </div>\n                        <button class=\"datacurso-chat-toggle\" id=\"toggleBtn\" aria-label=\"Minimizar/Maximizar chat\">-</button>\n                    </div>\n\n                    <div class=\"datacurso-chat-body\" id=\"chatBody\">\n                        <div class=\"datacurso-chat-messages\" id=\"chatMessages\">\n                            <div class=\"datacurso-chat-message ai\">\n                                ¡Hola! Soy tu asistente de IA. ¿En qué puedo ayudarte hoy?\n                            </div>\n                        </div>\n\n                        <div class=\"datacurso-chat-input-container\">\n                            <div class=\"datacurso-chat-input-wrapper\">\n                                <textarea\n                                    class=\"datacurso-chat-input\"\n                                    id=\"chatInput\"\n                                    placeholder=\"Escribe tu mensaje...\"\n                                    rows=\"1\"\n                                    aria-label=\"Mensaje para el asistente IA\"></textarea>\n                                <button id=\"sendBtn\" class=\"datacurso-chat-send\" aria-label=\"Enviar mensaje\">\n                                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n                                        <polygon points=\"22,2 15,22 11,13 2,9\"></polygon>\n                                    </svg>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"datacurso-chat-footer\">\n                        Powered by Datacurso IA\n                    </div>\n                </div>\n            `;\n\n            const chatContainer = document.createElement('div');\n            chatContainer.innerHTML = chatHTML;\n            this.chatWidget = chatContainer.firstElementChild;\n\n            const body = this.chatWidget.querySelector('#chatBody');\n            const toggleBtn = this.chatWidget.querySelector('#toggleBtn');\n\n            if (this.isMinimized) {\n                this.chatWidget.classList.add('minimized');\n                body.style.display = 'none';\n                toggleBtn.textContent = '+';\n                toggleBtn.setAttribute('aria-label', 'Maximizar chat');\n            } else {\n                body.style.display = 'flex';\n                toggleBtn.textContent = '-';\n                toggleBtn.setAttribute('aria-label', 'Minimizar chat');\n            }\n\n            document.body.appendChild(this.chatWidget);\n\n            requestAnimationFrame(() => {\n                setTimeout(() => {\n                    if (this.chatWidget) this.chatWidget.classList.add('show');\n                }, 100);\n            });\n        }\n\n        /**\n         * Adds event listeners to chat widget elements.\n         */\n        addEventListeners() {\n            const header = this.chatWidget.querySelector('#chatHeader');\n            const sendBtn = this.chatWidget.querySelector('#sendBtn');\n            const input = this.chatWidget.querySelector('#chatInput');\n\n            header.addEventListener('click', () => this.toggleChat());\n            sendBtn.addEventListener('click', () => this.sendMessage());\n\n            input.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    this.sendMessage();\n                }\n            });\n\n            input.addEventListener('input', () => {\n                input.style.height = 'auto';\n                input.style.height = Math.min(input.scrollHeight, 100) + 'px';\n            });\n\n            this.chatWidget.addEventListener('click', (e) => e.stopPropagation());\n        }\n\n        /**\n         * Toggles the chat widget between minimized and maximized states.\n         */\n        toggleChat() {\n            const body = this.chatWidget.querySelector('#chatBody');\n            const toggleBtn = this.chatWidget.querySelector('#toggleBtn');\n\n            if (this.isMinimized) {\n                this.chatWidget.classList.remove('minimized');\n                body.style.display = 'flex';\n                toggleBtn.textContent = '-';\n                toggleBtn.setAttribute('aria-label', 'Minimizar chat');\n                this.isMinimized = false;\n            } else {\n                this.chatWidget.classList.add('minimized');\n                body.style.display = 'none';\n                toggleBtn.textContent = '+';\n                toggleBtn.setAttribute('aria-label', 'Maximizar chat');\n                this.isMinimized = true;\n            }\n        }\n\n        /**\n         * Handles sending a message from the user to the AI assistant.\n         */\n        sendMessage() {\n            const input = this.chatWidget.querySelector('#chatInput');\n            const sendBtn = this.chatWidget.querySelector('#sendBtn');\n            if (!input || !sendBtn) return;\n\n            const messageText = input.value.trim();\n            if (!messageText || this.streaming) return;\n\n            if (messageText.length > 4000) {\n                this.addMessage('[Error] El mensaje es demasiado largo. Máximo 4000 caracteres.', 'ai');\n                return;\n            }\n\n            try {\n                this._closeCurrentStream();\n                sendBtn.disabled = true;\n\n                this.addMessage(messageText, 'user');\n                input.value = '';\n                input.style.height = 'auto';\n                this.scrollToBottom();\n                this.showTypingIndicator();\n\n                const courseId = window.courseid || this.courseId || 1;\n                if (!courseId || isNaN(courseId)) throw new Error('Course ID inválido');\n\n                const requests = Ajax.call([{\n                    methodname: \"local_datacurso_create_chat_message\",\n                    args: {\n                        courseid: parseInt(courseId, 10),\n                        lang: this._sanitizeString(\"es\"),\n                        message: this._sanitizeString(messageText.substring(0, 4000)),\n                    },\n                }]);\n\n                requests[0].then((data) => {\n                    if (!data) throw new Error('Respuesta vacía del servidor');\n                    const streamUrl = data.stream_url || data.streamurl;\n                    const sessionId = data.session_id || data.sessionId;\n                    if (!streamUrl) throw new Error('URL de stream ausente en la respuesta');\n                    this._startSSE(streamUrl, sessionId, sendBtn);\n                }).catch((err) => {\n                    this.hideTypingIndicator();\n                    this.addMessage('[Error] No se pudo iniciar el stream: ' + (err.message || 'Error desconocido'), 'ai');\n                    sendBtn.disabled = false;\n                    if (window.console) console.error('Chat error:', err);\n                    if (notification && notification.exception) notification.exception(err);\n                });\n            } catch (error) {\n                this.hideTypingIndicator();\n                this.addMessage('[Error] Error interno: ' + error.message, 'ai');\n                sendBtn.disabled = false;\n                if (window.console) console.error('Chat send error:', error);\n            }\n        }\n\n        /**\n         * Sanitizes a string by removing angle brackets.\n         * @param {string} str\n         * @returns {string}\n         */\n        _sanitizeString(str) {\n            if (typeof str !== 'string') return '';\n            return str.replace(/[<>]/g, '');\n        }\n\n        /**\n         * Ensures there is a single AI message bubble, converting typing indicator if needed.\n         * @returns {HTMLElement}\n         */\n        _ensureAIMessageEl() {\n            if (this.currentAIMessageEl) return this.currentAIMessageEl;\n\n            const messages = this.chatWidget.querySelector('#chatMessages');\n            let el = messages.querySelector('#typingIndicator');\n            if (el) {\n                // Convertir el typing en globo AI definitivo\n                el.id = ''; // ya no es indicador\n                el.classList.remove('typing-indicator');\n                el.className = 'datacurso-chat-message ai';\n                el.innerHTML = '';\n            } else {\n                el = document.createElement('div');\n                el.className = 'datacurso-chat-message ai';\n                el.textContent = '';\n                messages.appendChild(el);\n            }\n            this.currentAIMessageEl = el;\n            return el;\n        }\n\n        /**\n         * Starts SSE connection and handles incoming tokens for AI response.\n         * @param {string} streamUrl\n         * @param {string} sessionId\n         * @param {HTMLElement} sendBtn\n         */\n        _startSSE(streamUrl, sessionId, sendBtn) {\n            if (!streamUrl) {\n                this._finalizeStream(sendBtn);\n                this.addMessage('[Error] URL de stream inválida', 'ai');\n                return;\n            }\n\n            const messages = this.chatWidget.querySelector('#chatMessages');\n            if (!messages) {\n                this._finalizeStream(sendBtn);\n                return;\n            }\n\n            try {\n                const es = new EventSource(streamUrl);\n                this.currentEventSource = es;\n                this.streaming = true;\n                let firstToken = true;\n                let connectionTimeout = setTimeout(() => {\n                    if (this.streaming && firstToken) {\n                        this._appendToAIMessage('[Timeout: El servidor tardó demasiado en responder]');\n                        this._finalizeStream(sendBtn);\n                    }\n                }, 30000);\n\n                es.addEventListener('open', () => {\n                    if (window.console) console.log('SSE connection opened');\n                });\n\n                es.addEventListener('meta', () => {});\n\n                es.addEventListener('token', (ev) => {\n                    try {\n                        if (connectionTimeout) { clearTimeout(connectionTimeout); connectionTimeout = null; }\n                        const payload = JSON.parse(ev.data);\n                        const t = payload.t || '';\n                        if (firstToken) {\n                            firstToken = false;\n                            // Convertir typing -> globo AI único\n                            this._ensureAIMessageEl();\n                            // hideTypingIndicator ya no quita nada porque el id cambió\n                            this.hideTypingIndicator();\n                        }\n                        this._appendToAIMessage(t);\n                    } catch (e) {\n                        if (window.console) console.warn('Invalid token data:', ev.data);\n                    }\n                });\n\n                es.addEventListener('message_completed', () => {\n                    if (connectionTimeout) clearTimeout(connectionTimeout);\n                    this._finalizeStream(sendBtn);\n                });\n\n                es.addEventListener('error', (event) => {\n                    if (connectionTimeout) clearTimeout(connectionTimeout);\n                    if (window.console) console.error('SSE error:', event);\n                    if (!this.currentAIMessageEl || this.currentAIMessageEl.textContent.trim() === '') {\n                        this._appendToAIMessage('[Error de conexión con el servidor]');\n                    } else {\n                        this._appendToAIMessage('\\n[Conexión interrumpida]');\n                    }\n                    this._finalizeStream(sendBtn);\n                });\n\n                this.scrollToBottom();\n            } catch (error) {\n                if (window.console) console.error('Error starting SSE:', error);\n                this.addMessage('[Error] No se pudo establecer conexión SSE', 'ai');\n                this._finalizeStream(sendBtn);\n            }\n        }\n\n        /**\n         * Appends text to the current AI message bubble.\n         * @param {string} text\n         */\n        _appendToAIMessage(text) {\n            // Asegura que existe un único globo AI\n            if (!this.currentAIMessageEl) this._ensureAIMessageEl();\n            if (!this.currentAIMessageEl || typeof text !== 'string') return;\n\n            const currentText = this.currentAIMessageEl.textContent || '';\n            const maxLength = 10000;\n\n            if (currentText.length + text.length > maxLength) {\n                const remaining = maxLength - currentText.length;\n                if (remaining > 0) this.currentAIMessageEl.textContent += text.substring(0, remaining) + '...';\n                return;\n            }\n\n            this.currentAIMessageEl.textContent += text;\n            this.scrollToBottom();\n        }\n\n        /**\n         * Closes the current SSE stream and resets state.\n         */\n        _closeCurrentStream() {\n            if (this.currentEventSource) {\n                try { this.currentEventSource.close(); } catch (e) {\n                    if (window.console) console.warn('Error closing EventSource:', e);\n                }\n            }\n            this.currentEventSource = null;\n            this.streaming = false;\n            this.currentAIMessageEl = null;\n            this.hideTypingIndicator();\n        }\n\n        /**\n         * Finalizes the SSE stream and re-enables the send button.\n         * @param {HTMLElement} sendBtn\n         */\n        _finalizeStream(sendBtn) {\n            this._closeCurrentStream();\n            if (sendBtn) sendBtn.disabled = false;\n        }\n\n        /**\n         * Adds a message to the chat window.\n         * @param {string} text\n         * @param {string} type\n         */\n        addMessage(text, type) {\n            if (!text || typeof text !== 'string') return;\n\n            const messages = this.chatWidget.querySelector('#chatMessages');\n            if (!messages) return;\n\n            const messageElement = document.createElement('div');\n            messageElement.className = `datacurso-chat-message ${type}`;\n\n            const sanitizedText = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            messageElement.textContent = sanitizedText.substring(0, 10000);\n\n            messages.appendChild(messageElement);\n\n            const maxMessages = 100;\n            const nodes = messages.querySelectorAll('.datacurso-chat-message:not(.typing-indicator)');\n            if (nodes.length > maxMessages) {\n                for (let i = 0; i < nodes.length - maxMessages; i++) nodes[i].remove();\n            }\n\n            this.scrollToBottom();\n        }\n\n        /**\n         * Shows the typing indicator in the chat window.\n         */\n        showTypingIndicator() {\n            try {\n                const messages = this.chatWidget && this.chatWidget.querySelector('#chatMessages');\n                if (!messages) return;\n\n                // No dupliques el indicador\n                if (messages.querySelector('#typingIndicator')) return;\n\n                const typingElement = document.createElement('div');\n                typingElement.className = 'datacurso-chat-message ai typing-indicator';\n                typingElement.id = 'typingIndicator';\n                typingElement.innerHTML = '<span></span><span></span><span></span>';\n                messages.appendChild(typingElement);\n                this.scrollToBottom();\n            } catch (error) {\n                if (window.console) console.warn('Error showing typing indicator:', error);\n            }\n        }\n\n        /**\n         * Hides the typing indicator from the chat window.\n         */\n        hideTypingIndicator() {\n            try {\n                const typingIndicator = this.chatWidget && this.chatWidget.querySelector('#typingIndicator');\n                if (typingIndicator) typingIndicator.remove();\n            } catch (error) {\n                if (window.console) console.warn('Error hiding typing indicator:', error);\n            }\n        }\n\n        /**\n         * Scrolls the chat messages container to the bottom.\n         */\n        scrollToBottom() {\n            try {\n                const messages = this.chatWidget && this.chatWidget.querySelector('#chatMessages');\n                if (messages) {\n                    requestAnimationFrame(() => { messages.scrollTop = messages.scrollHeight; });\n                }\n            } catch (error) {\n                if (window.console) console.warn('Error scrolling to bottom:', error);\n            }\n        }\n\n        /**\n         * Destroys the chat widget and closes any open streams.\n         */\n        destroy() {\n            this._closeCurrentStream();\n            if (this.chatWidget) {\n                this.chatWidget.remove();\n                this.chatWidget = null;\n            }\n        }\n    }\n\n    let datacursoChatInstance = null;\n\n    return {\n        init: function () {\n            if (datacursoChatInstance) datacursoChatInstance.destroy();\n            try { datacursoChatInstance = new DatacursoChat(); }\n            catch (error) { notification.exception(error); }\n        },\n        destroy: function () {\n            if (datacursoChatInstance) {\n                datacursoChatInstance.destroy();\n                datacursoChatInstance = null;\n            }\n        }\n    };\n});\n"],"names":["define","Ajax","notification","DatacursoChat","constructor","chatWidget","isMinimized","userRole","courseId","isInCourseContext","currentEventSource","currentAIMessageEl","streaming","init","this","checkCourseContext","detectUserRole","createChatWidget","addEventListeners","error","window","console","datacurso_chat_config","courseid","parseInt","url","location","href","courseMatch","match","modMatch","activityMatch","document","querySelector","courseIdElement","courseIdValue","getAttribute","isNaN","warn","userrole","role","trim","teacherElements","selector","_","userMenu","textContent","toLowerCase","includes","chatHTML","chatContainer","createElement","innerHTML","firstElementChild","body","toggleBtn","classList","add","style","display","setAttribute","appendChild","requestAnimationFrame","setTimeout","header","sendBtn","input","addEventListener","toggleChat","sendMessage","e","key","shiftKey","preventDefault","height","Math","min","scrollHeight","stopPropagation","remove","messageText","value","length","addMessage","_closeCurrentStream","disabled","scrollToBottom","showTypingIndicator","Error","call","methodname","args","lang","_sanitizeString","message","substring","then","data","streamUrl","stream_url","streamurl","sessionId","session_id","_startSSE","catch","err","hideTypingIndicator","exception","str","replace","_ensureAIMessageEl","messages","el","id","className","_finalizeStream","es","EventSource","firstToken","connectionTimeout","_appendToAIMessage","log","ev","clearTimeout","t","JSON","parse","event","text","currentText","remaining","close","type","messageElement","sanitizedText","nodes","querySelectorAll","i","typingElement","typingIndicator","scrollTop","destroy","datacursoChatInstance"],"mappings":"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"}
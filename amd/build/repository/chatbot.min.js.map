{"version":3,"file":"chatbot.min.js","sources":["../../src/repository/chatbot.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module chatbot\n *\n * @module     local_coursegen/repository/chatbot\n * @copyright  2025 Wilber Narvaez <https://datacurso.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ajax from \"core/ajax\";\n\n/**\n * Send a planning message for the course AI conversation.\n * The backend should also return a streaming URL to reconnect to the stream.\n *\n * @param {{\n *   courseid: number,\n *   text: string,\n * }} payload - The payload to send the planning message\n * @return {Promise<Object>} response\n */\nexport async function planCourseMessage({courseid, text}) {\n    const args = {\n        courseid: Number(courseid) || 0,\n        text,\n    };\n    return ajax.call([\n        {\n            methodname: \"local_coursegen_plan_course_message\",\n            args,\n        },\n    ])[0];\n}\n\n/**\n * Create module for ask question to chatbot based in that information.\n *\n * @param {{\n *     courseid: number,\n *     sectionnum: number,\n *     beforemod: number,\n *     jobid: number,\n * }} payload - The payload to create module\n * - courseid: The ID of the course to create module for\n * - sectionnum: The number of the section to create module for\n * - beforemod: The ID of the module before which the new module will be created\n * @return {Promise<Object>} response\n */\nexport async function createMod({courseid, sectionnum, beforemod, jobid}) {\n    const args = {\n        courseid: Number(courseid),\n        sectionnum: Number(sectionnum),\n        beforemod: beforemod ? Number(beforemod) : null,\n        jobid: jobid\n    };\n    return ajax.call([\n        {\n            methodname: \"local_coursegen_create_mod\",\n            args,\n        },\n    ])[0];\n}\n\n/**\n * Create module with streaming support for real-time updates.\n *\n * @param {{\n *     courseid: number,\n *     sectionnum: number,\n *     beforemod: number,\n *     prompt: string,\n *     generateimages: number,\n * }} payload - The payload to create module with streaming\n * - courseid: The ID of the course to create module for\n * - sectionnum: The number of the section to create module for\n * - beforemod: The ID of the module before which the new module will be created\n * - prompt: The message to create\n * - generateimages: 0 not generate images, 1 generate images\n * @return {Promise<Object>} response\n */\nexport async function createModStream({courseid, sectionnum, beforemod, prompt, generateimages}) {\n    const args = {\n        courseid: Number(courseid),\n        sectionnum: Number(sectionnum),\n        beforemod: beforemod ? Number(beforemod) : null,\n        prompt,\n        generateimages: generateimages ? Number(generateimages) : 0,\n    };\n    return ajax.call([\n        {\n            methodname: \"local_coursegen_create_mod_stream\",\n            args,\n        },\n    ])[0];\n}\n\n/**\n * Apply AI-generated content to an existing course.\n *\n * @param {{\n *     courseid: number,\n * }} payload - The payload to apply course content\n * - courseid: The course ID to apply content to\n * @return {Promise<Object>} response\n */\nexport async function createCourse({courseid}) {\n    const args = {\n        courseid: Number(courseid),\n    };\n    return ajax.call([\n        {\n            methodname: \"local_coursegen_create_course\",\n            args,\n        },\n    ])[0];\n}\n\n/**\n * Execute AI course planning session.\n *\n * @param {number} courseid - The course ID to execute\n * @return {Promise<Object>} response\n */\nexport async function planCourseExecute(courseid) {\n    return ajax.call([\n        {\n            methodname: \"local_coursegen_plan_course_execute\",\n            args: {courseid: Number(courseid)},\n        },\n    ])[0];\n}\n\n"],"names":["courseid","args","Number","ajax","call","methodname","sectionnum","beforemod","jobid","prompt","generateimages","text"],"mappings":";;;;;;;6GAuHmCA,SAACA,sBAC1BC,KAAO,CACTD,SAAUE,OAAOF,kBAEdG,cAAKC,KAAK,CACb,CACIC,WAAY,gCACZJ,KAAAA,QAEL,iDAlEyBD,SAACA,SAADM,WAAWA,WAAXC,UAAuBA,UAAvBC,MAAkCA,mBACxDP,KAAO,CACTD,SAAUE,OAAOF,UACjBM,WAAYJ,OAAOI,YACnBC,UAAWA,UAAYL,OAAOK,WAAa,KAC3CC,MAAOA,cAEJL,cAAKC,KAAK,CACb,CACIC,WAAY,6BACZJ,KAAAA,QAEL,uDAoB+BD,SAACA,SAADM,WAAWA,WAAXC,UAAuBA,UAAvBE,OAAkCA,OAAlCC,eAA0CA,4BACtET,KAAO,CACTD,SAAUE,OAAOF,UACjBM,WAAYJ,OAAOI,YACnBC,UAAWA,UAAYL,OAAOK,WAAa,KAC3CE,OAAAA,OACAC,eAAgBA,eAAiBR,OAAOQ,gBAAkB,UAEvDP,cAAKC,KAAK,CACb,CACIC,WAAY,oCACZJ,KAAAA,QAEL,8CA8BiCD,iBAC7BG,cAAKC,KAAK,CACb,CACIC,WAAY,sCACZJ,KAAM,CAACD,SAAUE,OAAOF,cAE7B,wDA5GiCA,SAACA,SAADW,KAAWA,iBACzCV,KAAO,CACTD,SAAUE,OAAOF,WAAa,EAC9BW,KAAAA,aAEGR,cAAKC,KAAK,CACb,CACIC,WAAY,sCACZJ,KAAAA,QAEL"}